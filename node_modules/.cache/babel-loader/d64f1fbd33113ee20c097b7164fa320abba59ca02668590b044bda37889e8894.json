{"ast":null,"code":"var _jsxFileName = \"/home/sachamrt/projects/my_extension/src/WebPlayback.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Dropdown } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst track = {\n  name: \"\",\n  album: {\n    images: {\n      url: \"\"\n    }\n  },\n  artists: {\n    name: \"\"\n  }\n};\nfunction WebPlayback(props) {\n  _s();\n  const [player, setPlayer] = useState(undefined);\n  const [is_paused, setPaused] = useState(false);\n  const [is_active, setActive] = useState(false);\n  const [current_track, setTrack] = useState(track);\n  const [device_id, setDevice] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [Track, setCurTrack] = useState([]);\n  const [playbackState, setPlaybackState] = useState([]);\n\n  // const getDevice = async () => {\n  //     const response = await axios.get('https://api.spotify.com/v1/me/player/devices', {\n  //         headers: {\n  //             Authorization: `Bearer ${props.token}`\n  //         }\n  //     });\n  //     setDevice(response.data.devices);\n  // }\n\n  // const getplayingTrack = async () => {\n  //     const response = await axios.get('https://api.spotify.com/v1/me/player/currently-playing', {\n  //         headers: {\n  //             Authorization: `Bearer ${props.token}`\n  //         }\n  //     });\n  //     setCurTrack(response.data.item);\n  // }\n\n  const PlayState = async () => {\n    const response = await axios.get('https://api.spotify.com/v1/me/player', {\n      headers: {\n        Authorization: `Bearer ${props.token}`\n      }\n    });\n    // console.log('PlayState', response.data)\n    setPlaybackState(response.data);\n    setDevice(response.data.device.id);\n  };\n  const pausePlayback = async () => {\n    try {\n      const response = await axios.put('https://api.spotify.com/v1/me/player/pause', null, {\n        headers: {\n          Authorization: `Bearer ${props.token}`\n        }\n      });\n    } catch (error) {\n      console.error(error);\n    }\n    se;\n  };\n  const playButton = async () => {\n    try {\n      const response = await axios.put('https://api.spotify.com/v1/me/player/play', null, {\n        headers: {\n          Authorization: `Bearer ${props.token}`\n        }\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // const playButton = async () => {\n  //     const response = await axios.put('https://api.spotify.com/v1/me/player/pause', {\n  //         headers: {\n  //             Authorization: `Bearer ${props.token}`\n  //         },\n  //         params: {\n  //             device_id: device_id\n  //         }\n  //     });\n  //     setPause(!Pause);\n  // }\n\n  // const toggle = () => setIsOpen(!isOpen);\n\n  // getplayingTrack();\n\n  useEffect(() => {\n    // const script = document.createElement(\"script\");\n    // script.src = \"https://sdk.scdn.co/spotify-player.js\";\n    // script.async = true;\n\n    // document.body.appendChild(script);\n\n    // window.onSpotifyWebPlaybackSDKReady = () => {\n\n    //     const player = new window.Spotify.Player({\n    //         name: 'My_extension',\n    //         getOAuthToken: cb => { cb(props.token); },\n    //         volume: 0.3\n    //     });\n\n    //     setPlayer(player);\n\n    //     player.connect().then(success => {\n    //         if (success) {\n    //             console.log('The Web Playback SDK successfully connected to Spotify!');\n    //         }\n    //     });\n\n    //     player.addListener('ready', ({ device_id }) => {\n    //         console.log('Ready with Device ID', device_id);\n    //     });\n\n    //     player.addListener('not_ready', ({ device_id }) => {\n    //         console.log('Device ID has gone offline', device_id);\n    //     });\n\n    //     player.addListener('player_state_changed', ( state => {\n    //         if (!state) {\n    //             return;\n    //         }\n\n    //         setTrack(state.track_window.current_track);\n    //         setPaused(state.paused);\n\n    //         player.getCurrentState().then( state => {\n    //             (!state)? setActive(false): setActive(true);\n    //         });\n    //     }));\n\n    //     player.connect();\n    // };\n    // console.log('Track', Track)\n    // getDevice();\n    // playButton();\n    PlayState();\n    setPaused(playbackState.is_playing);\n  }, []);\n  console.log('Status', is_paused);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"body\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: playbackState.item ? playbackState.item.album.images[0].url : \"\",\n            className: \"now-playing__cover\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"now-playing__side\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"now-playing__name\",\n              children: playbackState.item ? playbackState.item.name : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"now-playing__artist\",\n              children: playbackState.item ? playbackState.item.artists[0].name : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-spotify\",\n              onClick: () => {\n                player.previousTrack();\n              },\n              children: \"<<\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-spotify\",\n              onClick: () => {\n                is_paused ? pausePlayback() : playButton();\n              },\n              children: !is_paused ? \"PLAY\" : \"PAUSE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-spotify\",\n              onClick: () => {\n                player.nextTrack();\n              },\n              children: \">>\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(WebPlayback, \"M3n2WwmdbuWm2G9fDhENdnIGABY=\");\n_c = WebPlayback;\nexport default WebPlayback;\nvar _c;\n$RefreshReg$(_c, \"WebPlayback\");","map":{"version":3,"names":["React","useState","useEffect","axios","Dropdown","track","name","album","images","url","artists","WebPlayback","props","player","setPlayer","undefined","is_paused","setPaused","is_active","setActive","current_track","setTrack","device_id","setDevice","isOpen","setIsOpen","Track","setCurTrack","playbackState","setPlaybackState","PlayState","response","get","headers","Authorization","token","data","device","id","pausePlayback","put","error","console","se","playButton","is_playing","log","item","previousTrack","nextTrack"],"sources":["/home/sachamrt/projects/my_extension/src/WebPlayback.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Dropdown } from 'react-bootstrap';\n\nconst track = {\n    name: \"\",\n    album: {\n        images: {\n            url: \"\"\n        }\n    },\n    artists: {\n        name: \"\"\n    }\n}\n\nfunction WebPlayback(props) {\n\n    const [player, setPlayer] = useState(undefined);\n    const [is_paused, setPaused] = useState(false);\n    const [is_active, setActive] = useState(false);\n    const [current_track, setTrack] = useState(track);\n    const [device_id, setDevice] = useState(\"\");\n    const [isOpen, setIsOpen] = useState(false);\n    const [Track, setCurTrack] = useState([]);\n    const [playbackState, setPlaybackState] = useState([]);\n\n    // const getDevice = async () => {\n    //     const response = await axios.get('https://api.spotify.com/v1/me/player/devices', {\n    //         headers: {\n    //             Authorization: `Bearer ${props.token}`\n    //         }\n    //     });\n    //     setDevice(response.data.devices);\n    // }\n\n    // const getplayingTrack = async () => {\n    //     const response = await axios.get('https://api.spotify.com/v1/me/player/currently-playing', {\n    //         headers: {\n    //             Authorization: `Bearer ${props.token}`\n    //         }\n    //     });\n    //     setCurTrack(response.data.item);\n    // }\n\n    const PlayState = async () => {\n        const response = await axios.get('https://api.spotify.com/v1/me/player', {\n            headers: {\n                Authorization: `Bearer ${props.token}`\n            }\n        });\n        // console.log('PlayState', response.data)\n        setPlaybackState(response.data);\n        setDevice(response.data.device.id);\n    }\n\n    const pausePlayback = async () => {\n        try {\n            const response = await axios.put('https://api.spotify.com/v1/me/player/pause', null, {\n                headers: {\n                    Authorization: `Bearer ${props.token}`\n                }\n            });\n        } catch (error) {\n            console.error(error);\n        }\n        se\n    };\n\n    const playButton = async () => {\n        try {\n            const response = await axios.put('https://api.spotify.com/v1/me/player/play', null, {\n                headers: {\n                    Authorization: `Bearer ${props.token}`\n                }\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    // const playButton = async () => {\n    //     const response = await axios.put('https://api.spotify.com/v1/me/player/pause', {\n    //         headers: {\n    //             Authorization: `Bearer ${props.token}`\n    //         },\n    //         params: {\n    //             device_id: device_id\n    //         }\n    //     });\n    //     setPause(!Pause);\n    // }\n\n    // const toggle = () => setIsOpen(!isOpen);\n\n    // getplayingTrack();\n    \n    useEffect(() => {\n        \n        // const script = document.createElement(\"script\");\n        // script.src = \"https://sdk.scdn.co/spotify-player.js\";\n        // script.async = true;\n\n        // document.body.appendChild(script);\n\n        // window.onSpotifyWebPlaybackSDKReady = () => {\n            \n            //     const player = new window.Spotify.Player({\n        //         name: 'My_extension',\n        //         getOAuthToken: cb => { cb(props.token); },\n        //         volume: 0.3\n        //     });\n        \n        //     setPlayer(player);\n        \n        //     player.connect().then(success => {\n        //         if (success) {\n        //             console.log('The Web Playback SDK successfully connected to Spotify!');\n        //         }\n        //     });\n        \n        //     player.addListener('ready', ({ device_id }) => {\n        //         console.log('Ready with Device ID', device_id);\n        //     });\n            \n        //     player.addListener('not_ready', ({ device_id }) => {\n        //         console.log('Device ID has gone offline', device_id);\n        //     });\n        \n        //     player.addListener('player_state_changed', ( state => {\n        //         if (!state) {\n        //             return;\n        //         }\n            \n        //         setTrack(state.track_window.current_track);\n        //         setPaused(state.paused);\n            \n        //         player.getCurrentState().then( state => {\n        //             (!state)? setActive(false): setActive(true);\n        //         });\n        //     }));\n        \n        //     player.connect();\n        // };\n        // console.log('Track', Track)\n        // getDevice();\n        // playButton();\n        PlayState();\n        setPaused(playbackState.is_playing);\n    }, []);\n\n    console.log('Status', is_paused)\n    return (\n        <>\n            <body className='App'>\n                <div className=\"container\">\n                    <div className=\"main-wrapper\">\n                        <img src={playbackState.item ? playbackState.item.album.images[0].url : \"\"} \n                            className=\"now-playing__cover\" alt=\"\" />\n            \n                        <div className=\"now-playing__side\">\n                            <div className=\"now-playing__name\">{playbackState.item ? playbackState.item.name : \"\"}</div>\n                            <div className=\"now-playing__artist\">{playbackState.item ? playbackState.item.artists[0].name : \"\"}</div>\n\n                            <button className=\"btn-spotify\" onClick={() => { player.previousTrack() }} >\n                                &lt;&lt;\n                            </button>\n                            <button className=\"btn-spotify\" onClick={() => { is_paused ? pausePlayback() : playButton() }} >\n                                { !is_paused ? \"PLAY\" : \"PAUSE\" }\n                            </button>\n\n                            <button className=\"btn-spotify\" onClick={() => { player.nextTrack() }} >\n                                &gt;&gt;\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </body>\n        </>\n    );\n}\n\nexport default WebPlayback\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}